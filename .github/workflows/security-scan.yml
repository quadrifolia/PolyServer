name: Security and Vulnerability Scanning

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

# Add permissions for PR comments and issue writing
permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  # Job 1: Scan for secrets and sensitive data
  secret-scanning:
    runs-on: ubuntu-latest
    name: Secret and Credential Scanning
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for secret scanning
        
    - name: Install TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        
    - name: Run TruffleHog secret scan
      run: |
        echo "🔍 Scanning for secrets and credentials..."
        trufflehog git file://. --branch=main --only-verified=false --json > trufflehog-results.json || true
        
        # Check if any secrets were found
        if [ -s trufflehog-results.json ]; then
          echo "⚠️ Potential secrets detected:"
          cat trufflehog-results.json
          echo ""
          echo "Please review and remove any exposed credentials before merging."
          # Don't fail on secrets detection in case of false positives
          # Manual review is required
        else
          echo "✅ No secrets detected"
        fi
        
    - name: Upload secret scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-scan-results
        path: trufflehog-results.json

  # Job 2: Container image vulnerability scanning
  container-vulnerability-scan:
    runs-on: ubuntu-latest
    name: Container Vulnerability Scanning
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
    - name: Build test container
      run: |
        echo "🔨 Building container for vulnerability scanning..."
        
        # Use the local test configuration to build a container
        chmod +x local-test-docker.sh
        ./local-test-docker.sh
        
    - name: Scan container with Trivy
      run: |
        echo "🔍 Scanning container for vulnerabilities..."
        
        # Scan the built container image
        trivy image --format json --output container-vulnerabilities.json polyserver:test || true
        
        # Display summary
        trivy image --severity HIGH,CRITICAL polyserver:test
        
        # Check for critical vulnerabilities
        CRITICAL_COUNT=$(trivy image --format json polyserver:test | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length')
        HIGH_COUNT=$(trivy image --format json polyserver:test | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length')
        
        echo "Critical vulnerabilities: $CRITICAL_COUNT"
        echo "High vulnerabilities: $HIGH_COUNT"
        
        # Warn but don't fail on vulnerabilities (as base image may have known issues)
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "⚠️ Critical vulnerabilities found in container"
        fi
        
    - name: Cleanup test container
      if: always()
      run: |
        chmod +x local-test-cleanup-docker.sh
        ./local-test-cleanup-docker.sh || true
        
    - name: Upload vulnerability scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-vulnerability-scan
        path: container-vulnerabilities.json

  # Job 3: Dependency and supply chain security
  dependency-scan:
    runs-on: ubuntu-latest
    name: Dependency and Supply Chain Security
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check for package management files
      run: |
        echo "📦 Checking for dependency files..."
        
        # Check for various package management files
        find . -name "package.json" -o -name "requirements.txt" -o -name "Gemfile" -o -name "pom.xml" -o -name "build.gradle" | while read -r file; do
          echo "Found dependency file: $file"
        done
        
        # Since PolyServer is primarily shell scripts and templates,
        # we'll focus on the external tools and repositories it uses
        
    - name: Audit external dependencies
      run: |
        echo "🔍 Auditing external dependencies..."
        
        # Check server-setup.sh template for external downloads
        if [ -f "templates/server-setup.sh.template" ]; then
          echo "Checking external downloads in server-setup.sh template..."
          
          # Extract URLs being downloaded
          grep -E "(wget|curl).*http" templates/server-setup.sh.template | while read -r line; do
            echo "External download: $line"
          done
          
          # Check for GitHub raw downloads (potential supply chain risk)
          if grep -q "raw.githubusercontent.com" templates/server-setup.sh.template; then
            echo "⚠️ GitHub raw file downloads detected - ensure these are from trusted sources"
            grep "raw.githubusercontent.com" templates/server-setup.sh.template
          fi
          
          # Check for package installations
          if grep -q "apt-get install" templates/server-setup.sh.template; then
            echo "📋 APT packages being installed:"
            grep -o "apt-get install.*" templates/server-setup.sh.template
          fi
        fi
        
        echo "✅ Dependency audit completed"

  # Job 4: Code quality and security analysis
  code-quality-scan:
    runs-on: ubuntu-latest
    name: Code Quality and Security Analysis
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install analysis tools
      run: |
        # Install ShellCheck for shell script analysis
        sudo apt-get update
        sudo apt-get install shellcheck
        
        # Install hadolint for Dockerfile linting
        wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x hadolint
        sudo mv hadolint /usr/local/bin/
        
    - name: Run ShellCheck on all shell scripts
      run: |
        echo "🔍 Running ShellCheck analysis..."
        
        exit_code=0
        
        # Check main scripts
        find scripts/ -name "*.sh" -type f | while read -r script; do
          echo "Analyzing $script..."
          if ! shellcheck -f gcc "$script"; then
            exit_code=1
          fi
        done
        
        # Check test scripts
        for script in local-test-docker.sh local-test-cleanup-docker.sh; do
          if [ -f "$script" ]; then
            echo "Analyzing $script..."
            if ! shellcheck -f gcc "$script"; then
              exit_code=1
            fi
          fi
        done
        
        # Check server-setup template (with variable substitution)
        if [ -f "templates/server-setup.sh.template" ]; then
          echo "Analyzing server-setup.sh template..."
          # Substitute template variables for analysis
          sed 's/{{[^}]*}}/TEST_VALUE/g' templates/server-setup.sh.template > /tmp/server-setup-analysis.sh
          if ! shellcheck -e SC2034,SC2154 -f gcc /tmp/server-setup-analysis.sh; then
            exit_code=1
          fi
        fi
        
        if [ $exit_code -eq 0 ]; then
          echo "✅ All shell scripts passed ShellCheck analysis"
        else
          echo "❌ ShellCheck found issues that should be addressed"
          exit 1
        fi
        
    - name: Check for Dockerfile and analyze
      run: |
        echo "🐳 Checking for Dockerfiles..."
        
        find . -name "Dockerfile*" -type f | while read -r dockerfile; do
          echo "Analyzing $dockerfile with hadolint..."
          hadolint "$dockerfile" || true
        done
        
        # Also check test Dockerfile creation in local-test-docker.sh
        if grep -q "cat > test-config/Dockerfile" local-test-docker.sh; then
          echo "✅ Test Dockerfile generation found in local-test-docker.sh"
        fi
        
    - name: Validate configuration file formats
      run: |
        echo "📄 Validating configuration file formats..."
        
        # Check YAML files
        find templates/ -name "*.yml" -o -name "*.yaml" | while read -r yaml_file; do
          echo "Validating YAML: $yaml_file"
          # Substitute template variables and validate
          sed 's/{{[^}]*}}/TEST_VALUE/g' "$yaml_file" | python3 -m yaml.tool > /dev/null
        done
        
        # Check JSON templates
        find templates/ -name "*.json" | while read -r json_file; do
          echo "Validating JSON: $json_file"
          # Substitute template variables and validate
          sed 's/{{[^}]*}}/TEST_VALUE/g' "$json_file" | python3 -m json.tool > /dev/null
        done
        
        echo "✅ Configuration file validation completed"

  # Job 5: Generate security report
  security-report:
    runs-on: ubuntu-latest
    name: Generate Security Report
    needs: [secret-scanning, container-vulnerability-scan, dependency-scan, code-quality-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: security-results
        
    - name: Generate security summary report
      run: |
        echo "📊 Security Scan Summary Report" > security-report.md
        echo "===============================" >> security-report.md
        echo "" >> security-report.md
        echo "**Date:** $(date)" >> security-report.md
        echo "**Repository:** ${{ github.repository }}" >> security-report.md
        echo "**Branch:** ${{ github.ref }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Job Results" >> security-report.md
        echo "" >> security-report.md
        
        if [ "${{ needs.secret-scanning.result }}" = "success" ]; then
          echo "✅ **Secret Scanning:** PASSED" >> security-report.md
        else
          echo "❌ **Secret Scanning:** FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.container-vulnerability-scan.result }}" = "success" ]; then
          echo "✅ **Container Vulnerability Scan:** PASSED" >> security-report.md
        else
          echo "❌ **Container Vulnerability Scan:** FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
          echo "✅ **Dependency Scan:** PASSED" >> security-report.md
        else
          echo "❌ **Dependency Scan:** FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.code-quality-scan.result }}" = "success" ]; then
          echo "✅ **Code Quality Scan:** PASSED" >> security-report.md
        else
          echo "❌ **Code Quality Scan:** FAILED" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "## Recommendations" >> security-report.md
        echo "" >> security-report.md
        echo "- Review any failed checks above" >> security-report.md
        echo "- Address any critical or high severity vulnerabilities" >> security-report.md
        echo "- Ensure all external dependencies are from trusted sources" >> security-report.md
        echo "- Keep base Docker images updated" >> security-report.md
        echo "- Regular security audits of the server hardening configuration" >> security-report.md
        
        echo ""
        echo "📄 Security Report Generated:"
        cat security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: security-report.md
        
    - name: Comment on PR with security summary (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      continue-on-error: true
      with:
        script: |
          try {
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🛡️ Security Scan Results\n\n${report}`
            });
            
            console.log('✅ Security report posted to PR successfully');
          } catch (error) {
            console.log('⚠️ Failed to post security report to PR:', error.message);
            console.log('This may be due to insufficient permissions or forked PR restrictions');
            console.log('Security report is still available as an artifact');
          };