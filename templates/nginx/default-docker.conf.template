# Docker Mode Nginx configuration for PolyServer
# Reverse proxy to containerized applications

server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header X-Robots-Tag "noindex, noarchive, nofollow" always;

    # Rate limiting
    limit_req zone=general_limit burst=20 nodelay;
    limit_req_status 429;

    # Health check endpoint (served by nginx directly)
    location /health {
        access_log off;
        return 200 "OK\n";
        add_header Content-Type text/plain;
    }

    # Nginx status endpoint (for monitoring)
    location /nginx-status {
        stub_status;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }

    # Block access to hidden files
    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all;
    }

    # Security configuration include
    include /etc/nginx/conf.d/security.conf;

    # Main application proxy
    location / {
        # Try to proxy to the main application container
        proxy_pass http://backend;
        
        # Include proxy parameters
        include /etc/nginx/conf.d/proxy_params;
        
        # Specific proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Caching for static assets (if served by app)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://backend;
            include /etc/nginx/conf.d/proxy_params;
            
            # Cache static assets
            proxy_cache app_cache;
            proxy_cache_valid 200 1h;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_revalidate on;
            proxy_cache_lock on;
            
            # Add cache headers
            add_header X-Cache-Status $upstream_cache_status;
            expires 1h;
        }
    }

    # API endpoints with specific rate limiting
    location /api/ {
        limit_req zone=api_limit burst=30 nodelay;
        
        proxy_pass http://backend;
        include /etc/nginx/conf.d/proxy_params;
        
        # API-specific settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable caching for API calls
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Authentication endpoints with stricter rate limiting
    location ~ ^/(login|logout|register|auth|signin|signup)$ {
        limit_req zone=login_limit burst=5 nodelay;
        
        proxy_pass http://backend;
        include /etc/nginx/conf.d/proxy_params;
        
        # Security for auth endpoints
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /var/www/html;
        internal;
    }
    
    location = /50x.html {
        root /var/www/html;
        internal;
    }
}

# HTTPS configuration (uncomment when SSL certificate is available)
# server {
#     listen 443 ssl http2 default_server;
#     listen [::]:443 ssl http2 default_server;
#     server_name {{BASE_DOMAIN}};
#
#     # SSL configuration
#     ssl_certificate /etc/letsencrypt/live/{{BASE_DOMAIN}}/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/{{BASE_DOMAIN}}/privkey.pem;
#     ssl_session_timeout 1d;
#     ssl_session_cache shared:SSL:50m;
#     ssl_session_tickets off;
#
#     # Modern configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#
#     # HSTS
#     add_header Strict-Transport-Security "max-age=63072000" always;
#
#     # Security headers
#     add_header X-Frame-Options "SAMEORIGIN" always;
#     add_header X-Content-Type-Options "nosniff" always;
#     add_header X-XSS-Protection "1; mode=block" always;
#     add_header Referrer-Policy "no-referrer-when-downgrade" always;
#
#     # Rate limiting
#     limit_req zone=general_limit burst=20 nodelay;
#
#     # Health check endpoint
#     location /health {
#         access_log off;
#         return 200 "OK\n";
#         add_header Content-Type text/plain;
#     }
#
#     # Block access to hidden files
#     location ~ /\. {
#         access_log off;
#         log_not_found off;
#         deny all;
#     }
#
#     # Security configuration include
#     include /etc/nginx/conf.d/security.conf;
#
#     # Main application proxy (same as HTTP config)
#     location / {
#         proxy_pass http://backend;
#         include /etc/nginx/conf.d/proxy_params;
#         
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         
#         # WebSocket support
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#     }
#
#     # API endpoints
#     location /api/ {
#         limit_req zone=api_limit burst=30 nodelay;
#         proxy_pass http://backend;
#         include /etc/nginx/conf.d/proxy_params;
#     }
#
#     # Authentication endpoints
#     location ~ ^/(login|logout|register|auth|signin|signup)$ {
#         limit_req zone=login_limit burst=5 nodelay;
#         proxy_pass http://backend;
#         include /etc/nginx/conf.d/proxy_params;
#     }
# }